@{
    ViewData["Title"] = "Home Page";
}

<!-- Client side libs required  -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.1.1/min/dropzone.min.css" crossorigin="anonymous">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/blueimp-gallery/2.25.2/css/blueimp-gallery.min.css" crossorigin="anonymous">

<style>
    html {
        font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
    }

    main {
        margin: 20px;
    }

    #gallery-note {
        font-size: smaller
    }

    .blueimp-gallery {
        margin: 25px;
        max-width: 150px;
        padding-bottom: 150px;
    }

    .dropzone {
        border: 3px dashed #00a1f1;
        background: #F0F8FF;
        margin: 25px;
        border-radius: 5px;
        max-width: 400px;
    }

    .dropzone .dz-message {
        font-weight: 350;
    }

    .dropzone .dz-message .note {
        font-family: sans-serif;
        font-size: 18px;
        font-weight: 200;
        display: block;
        margin-top 1.5rem;
    }
</style>


<main>
    <div class="box header">
        <h1><span class="fa fa-user-circle-o"></span> <span id="page-title">ImageResizer</span></h1>
    </div>
    
    <div class="box content">
        <hr>
        <h2>Upload photos</h2>
        <div>
            <form action="/api/images/upload"
                 class="dropzone needsclick dz-clickable" 
                 id="image-upload"
                 method="post"
                 enctype="multipart/form">

                <div class="dz-message needsclick">
                    <span class="note needsclick">
                        Drop files here or click to upload.
                    </span>
                </div>
            </form>
        </div>
        <h2>Generated Thumbnails</h2>
            <!-- <p><span id="gallery-note">Gallery refreshes from storage container image links every 5 seconds.</span></p> -->
            <div id="stored-images"></div>

            <!-- The Gallery as inline carousel, can be positioned anywhere on the page -->
            <div id="blueimp-gallery-carousel" class="blueimp-gallery blueimp-gallery-carousel">
                <div class="slides"></div>
                <h3 class="title"></h3>
                <a class="prev">‹</a>
                <a class="next">›</a>
                <a class="play-pause"></a>
                <ol class="indicator"></ol>
            </div>

            <div>
                <h4>Image info</h4>
                <div id="imageInfoDiv">
                    &lt;Image info&gt;
                </div>
            </div>
        </div>
    </div>
    <div class="box footer">
        <hr>
        <div class="privacy">
            <p>This app has no official privacy policy. Your data will be uploaded to a service in order produce a picture.
                Your images will be public once you upload them and there is no automated way to remove them.</p>
        </div>
    </div>
</main>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.1.1/min/dropzone.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/blueimp-gallery/2.25.2/js/blueimp-gallery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script>

<script>
    // Update image info
    function updateImageInfo(imglink)
    {
        console.log("updateImageInfo");
        document.getElementById("imageInfoDiv").innerHTML = imgLink;
        
    }

    function buildTable(imgName, tableData)
    {
        if (tableData[0] == '{')
        {
            var t = "<table border=0>\n";
            t += "  <tr><th>Key</th><th>Value</th></tr>\n";
            var obj = JSON.parse(tableData);
            Object.keys(obj).forEach(function(key) {
                t += "  <tr><td>"+key+"</td><td>"+obj[key]+"</td></tr>\n";
            });
            t += "</table>\n";
            return t;
        }
        else
        {
            return imgName+"<BR>"+tableData+"<BR>\n";
        }
    }

    function onGallerySlide(index) {
        //var unique_id = this.list[index].getAttribute('data-unique-id');
        /*
        var unique_id = index;
        console.log(unique_id);
        document.getElementById("imageInfoDiv").innerHTML = unique_id;
        */
        
        var url = this.list[index];
        var fileext = "";
        if (url.search(".jpg") > -1){ fileext = ".jpg"; }
        else if (url.search(".jpeg") > -1){ fileext = ".jpeg"; }
        else if (url.search(".png") > -1){ fileext = ".png"; }
        var imgname = url.substring(url.lastIndexOf('/')+1, url.search(fileext)+fileext.length);
        console.log(imgname);
        //document.getElementById("imageInfoDiv").innerHTML = imgname;
        
        
        var baseurl = window.location.href;
        if (!(/^http[s]?:\/\/localhost\:[0-9]+\//.test(baseurl)))
        {
            baseurl = "https://imgtutfuncapp.azurewebsites.net"
        }
        baseurl = "https://imgtutfuncapp.azurewebsites.net"
        var request = new XMLHttpRequest()
        request.open('GET', baseurl + '/api/GetImgInfo?imgname='+encodeURIComponent(imgname), true)
        request.timeout = 500
        request.onload = function() {
            // Begin accessing JSON data here
            //var data = JSON.parse(this.response)

            if (request.status >= 200 && request.status < 400) {
                document.getElementById("imageInfoDiv").innerHTML = buildTable(imgname, this.response);
            } else {
                console.log('error')
            }
        }

        request.send()
        /*
        // "/api/GetImgInfo";
        var request = new XMLHttpRequest()

        request.open('GET', 'https://ghibliapi.herokuapp.com/films', true)
        request.onload = function() {
        // Begin accessing JSON data here
        var data = JSON.parse(this.response)

        if (request.status >= 200 && request.status < 400) {
            data.forEach(movie => {
            console.log(movie.title)
            })
        } else {
            console.log('error')
        }
        }

        request.send()
        */
    }

    // init gallery for later use
    var gallery;

    // Grab links for images from backend api
    function fetchImageLinks() {
        // Fetch images
        $.get("api/Images/thumbnails", function(fetchedImageLinks) {
            console.log(fetchedImageLinks)

            // Check if anything is in there
            if ( _.isEmpty(fetchedImageLinks) ){
                console.log('empty fetched')
                // do nothing  
            } else {
                // Check if we have a gallery initialized
                if ( _.isEmpty(gallery) ) {
                    // initialize gallery
                    gallery = blueimp.Gallery(
                                fetchedImageLinks, // gallery links array
                                {
                                    container: '#blueimp-gallery-carousel',
                                    carousel: true,
                                    onslide: onGallerySlide
                                } // gallery options
                            );
                } else {
                    // check if images are equal to array
                    console.log('currently in gallery:')
                    console.log(gallery.list)
                    var imageLinksEqual = _.isEqual(_.sortBy(gallery.list.map(s => s.split("?")[0])), _.sortBy(fetchedImageLinks.map(s => s.split("?")[0])))
                    if ( imageLinksEqual ) {
                        console.log('images arr are equal')
                        // do nothing
                    } else {
                        console.log('images arr are not equal')

                        // update gallery with new image urls. Only compare actual url without SAS token query string
                        var newImageLinks = _.difference(fetchedImageLinks.map(s => s.split("?")[0]), gallery.list.map(s => s.split("?")[0]))

                        console.log('differene is: ')
                        console.log(newImageLinks)
                        // Only add new images
                        gallery.add(newImageLinks);

                        // Force image load
                        gallery.next();

                        // Update image info
                        updateImageInfo(newImageLinks);
                    }
                }       
            }     
        });
    }

    // Start first interval
    fetchImageLinks()
    
    setInterval(function() {
        fetchImageLinks()
    }, 5000) 

    /* Dropzone */
    // "imageUpload" is the camelized version of the HTML element's ID
    Dropzone.options.imageUpload = {
        paramName: "files", // The name that will be used to transfer the file
        dictDefaultMessage: "Drop files here or Click to Upload",
        addRemoveLinks: true, // Allows for cancellation of file upload and remove thumbnail
        init: function() {
            myDropzone = this;
            myDropzone.on("success", function(file, response) {
                console.log("Success");
                myDropzone.removeFile(file);
            });                    
        }
    };
</script>
